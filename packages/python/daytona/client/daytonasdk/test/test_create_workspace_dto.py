# coding: utf-8

"""
    Daytona Server API

    Daytona Server API

    The version of the OpenAPI document: v0.0.0-dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from daytonasdk.models.create_workspace_dto import CreateWorkspaceDTO

class TestCreateWorkspaceDTO(unittest.TestCase):
    """CreateWorkspaceDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateWorkspaceDTO:
        """Test CreateWorkspaceDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateWorkspaceDTO`
        """
        model = CreateWorkspaceDTO()
        if include_optional:
            return CreateWorkspaceDTO(
                id = '',
                name = '',
                projects = [
                    daytonasdk.models.create_project_dto.CreateProjectDTO(
                        build_config = daytonasdk.models.build_config.BuildConfig(
                            cached_build = daytonasdk.models.cached_build.CachedBuild(
                                image = '', 
                                user = '', ), 
                            devcontainer = daytonasdk.models.devcontainer_config.DevcontainerConfig(
                                file_path = '', ), ), 
                        env_vars = {
                            'key' : ''
                            }, 
                        git_provider_config_id = '', 
                        image = '', 
                        name = '', 
                        source = daytonasdk.models.create_project_source_dto.CreateProjectSourceDTO(
                            repository = daytonasdk.models.git_repository.GitRepository(
                                branch = '', 
                                clone_target = 'branch', 
                                id = '', 
                                name = '', 
                                owner = '', 
                                path = '', 
                                pr_number = 56, 
                                sha = '', 
                                source = '', 
                                url = '', ), ), 
                        user = '', )
                    ],
                target = ''
            )
        else:
            return CreateWorkspaceDTO(
                id = '',
                name = '',
                projects = [
                    daytonasdk.models.create_project_dto.CreateProjectDTO(
                        build_config = daytonasdk.models.build_config.BuildConfig(
                            cached_build = daytonasdk.models.cached_build.CachedBuild(
                                image = '', 
                                user = '', ), 
                            devcontainer = daytonasdk.models.devcontainer_config.DevcontainerConfig(
                                file_path = '', ), ), 
                        env_vars = {
                            'key' : ''
                            }, 
                        git_provider_config_id = '', 
                        image = '', 
                        name = '', 
                        source = daytonasdk.models.create_project_source_dto.CreateProjectSourceDTO(
                            repository = daytonasdk.models.git_repository.GitRepository(
                                branch = '', 
                                clone_target = 'branch', 
                                id = '', 
                                name = '', 
                                owner = '', 
                                path = '', 
                                pr_number = 56, 
                                sha = '', 
                                source = '', 
                                url = '', ), ), 
                        user = '', )
                    ],
                target = '',
        )
        """

    def testCreateWorkspaceDTO(self):
        """Test CreateWorkspaceDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
