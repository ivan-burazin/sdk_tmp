# coding: utf-8

"""
    Daytona Server API

    Daytona Server API

    The version of the OpenAPI document: v0.0.0-dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from daytonasdk.models.project import Project

class TestProject(unittest.TestCase):
    """Project unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Project:
        """Test Project
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Project`
        """
        model = Project()
        if include_optional:
            return Project(
                build_config = daytonasdk.models.build_config.BuildConfig(
                    cached_build = daytonasdk.models.cached_build.CachedBuild(
                        image = '', 
                        user = '', ), 
                    devcontainer = daytonasdk.models.devcontainer_config.DevcontainerConfig(
                        file_path = '', ), ),
                env_vars = {
                    'key' : ''
                    },
                git_provider_config_id = '',
                image = '',
                name = '',
                repository = daytonasdk.models.git_repository.GitRepository(
                    branch = '', 
                    clone_target = 'branch', 
                    id = '', 
                    name = '', 
                    owner = '', 
                    path = '', 
                    pr_number = 56, 
                    sha = '', 
                    source = '', 
                    url = '', ),
                state = daytonasdk.models.project_state.ProjectState(
                    git_status = daytonasdk.models.git_status.GitStatus(
                        ahead = 56, 
                        behind = 56, 
                        branch_published = True, 
                        current_branch = '', 
                        file_status = [
                            daytonasdk.models.file_status.FileStatus(
                                extra = '', 
                                name = '', 
                                staging = 'Unmodified', 
                                worktree = 'Unmodified', )
                            ], ), 
                    updated_at = '', 
                    uptime = 56, ),
                target = '',
                user = '',
                workspace_id = ''
            )
        else:
            return Project(
                env_vars = {
                    'key' : ''
                    },
                image = '',
                name = '',
                repository = daytonasdk.models.git_repository.GitRepository(
                    branch = '', 
                    clone_target = 'branch', 
                    id = '', 
                    name = '', 
                    owner = '', 
                    path = '', 
                    pr_number = 56, 
                    sha = '', 
                    source = '', 
                    url = '', ),
                target = '',
                user = '',
                workspace_id = '',
        )
        """

    def testProject(self):
        """Test Project"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
