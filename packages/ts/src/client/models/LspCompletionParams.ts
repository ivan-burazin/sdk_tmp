/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifier } from './GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifier';
import {
    GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifierFromJSON,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifierFromJSONTyped,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifierToJSON,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifierToJSONTyped,
} from './GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifier';
import type { GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContext } from './GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContext';
import {
    GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContextFromJSON,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContextFromJSONTyped,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContextToJSON,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContextToJSONTyped,
} from './GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContext';
import type { GithubComDaytonaioDaytonaPkgAgentToolboxLspPosition } from './GithubComDaytonaioDaytonaPkgAgentToolboxLspPosition';
import {
    GithubComDaytonaioDaytonaPkgAgentToolboxLspPositionFromJSON,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspPositionFromJSONTyped,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspPositionToJSON,
    GithubComDaytonaioDaytonaPkgAgentToolboxLspPositionToJSONTyped,
} from './GithubComDaytonaioDaytonaPkgAgentToolboxLspPosition';

/**
 * 
 * @export
 * @interface LspCompletionParams
 */
export interface LspCompletionParams {
    /**
     * 
     * @type {GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContext}
     * @memberof LspCompletionParams
     */
    context?: GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContext;
    /**
     * 
     * @type {string}
     * @memberof LspCompletionParams
     */
    languageId: string;
    /**
     * 
     * @type {GithubComDaytonaioDaytonaPkgAgentToolboxLspPosition}
     * @memberof LspCompletionParams
     */
    position?: GithubComDaytonaioDaytonaPkgAgentToolboxLspPosition;
    /**
     * 
     * @type {GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifier}
     * @memberof LspCompletionParams
     */
    textDocument?: GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifier;
}

/**
 * Check if a given object implements the LspCompletionParams interface.
 */
export function instanceOfLspCompletionParams(value: object): value is LspCompletionParams {
    if (!('languageId' in value) || value['languageId'] === undefined) return false;
    return true;
}

export function LspCompletionParamsFromJSON(json: any): LspCompletionParams {
    return LspCompletionParamsFromJSONTyped(json, false);
}

export function LspCompletionParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LspCompletionParams {
    if (json == null) {
        return json;
    }
    return {
        
        'context': json['context'] == null ? undefined : GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContextFromJSON(json['context']),
        'languageId': json['languageId'],
        'position': json['position'] == null ? undefined : GithubComDaytonaioDaytonaPkgAgentToolboxLspPositionFromJSON(json['position']),
        'textDocument': json['textDocument'] == null ? undefined : GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifierFromJSON(json['textDocument']),
    };
}

export function LspCompletionParamsToJSON(json: any): LspCompletionParams {
    return LspCompletionParamsToJSONTyped(json, false);
}

export function LspCompletionParamsToJSONTyped(value?: LspCompletionParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'context': GithubComDaytonaioDaytonaPkgAgentToolboxLspCompletionContextToJSON(value['context']),
        'languageId': value['languageId'],
        'position': GithubComDaytonaioDaytonaPkgAgentToolboxLspPositionToJSON(value['position']),
        'textDocument': GithubComDaytonaioDaytonaPkgAgentToolboxLspTextDocumentIdentifierToJSON(value['textDocument']),
    };
}

